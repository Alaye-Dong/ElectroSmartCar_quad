C251 COMPILER V5.60.0,  eeprom                                                             27/06/23  14:18:25  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE eeprom
OBJECT MODULE PLACED IN .\Out_File\eeprom.obj
COMPILER INVOKED BY: C:\Keil_v5\C251\BIN\C251.EXE eeprom.c LARGE INTR2 ROM(HUGE) WARNINGLEVEL(3) BROWSE INCDIR(..\..\Lib
                    -raries\libraries;..\..\Libraries\seekfree_libraries;..\..\Libraries\seekfree_peripheral;..\CODE;..\USER\inc;..\USER\src)
                    - DEBUG PRINT(.\Out_File\eeprom.lst) TABS(2) OBJECT(.\Out_File\eeprom.obj) 

stmt  level    source

    1          #include "headfile.h"
    2          
    3          uint8 date_buff[100]; //eeprom数据数组
    4          void eeprom_init()
    5          {
    6   1          iap_init();                 //初始化EEPROM;
    7   1      
    8   1          iap_read_bytes(0x00, date_buff, 100);   //从EEPROM中读取数据
    9   1      
   10   1      ///****不用eeprom直接赋值****/
   11   1      //    g_dirControl_P    = 16.7;//read_float(0);
   12   1      //    g_dirControl_D    = 15;//read_float(1);
   13   1      //    angle_kp1         = 0.425;//read_float(2);
   14   1      
   15   1      //    Motor_Kp_L        = 45;//read_float(3);
   16   1      //    Motor_Ki_L        = 5.7;//read_float(4);
   17   1      //  
   18   1      //    Motor_Kp_R        = 45;//read_float(5);
   19   1      //    Motor_Ki_R        = 5.7;//read_float(6);
   20   1        
   21   1      /****用eeprom赋值****/  
   22   1          Motor_Kp_L      = read_float(0);
   23   1          Motor_Ki_L        = read_float(1);
   24   1          Motor_Kp_R        = read_float(2);
   25   1          Motor_Ki_R      = read_float(3);
   26   1          angle_kp1         = read_float(4);
   27   1          ZX_kp           = read_float(5);
   28   1          ZX_kd           = read_float(6);
   29   1          g_dirControl_P  = read_float(7);
   30   1          g_dirControl_D   = read_float(8);
   31   1        
   32   1      }
   33          void save_int(int32 input, uint8 value_bit)
   34          {
   35   1          uint8 i;
   36   1          uint8 begin = value_bit * 4;
   37   1          uint8* p = (uint8*)&input;
   38   1          for(i = 0; i < 4; i++)
   39   1          {
   40   2              date_buff[begin++] = *(p + i);
   41   2          }
   42   1          extern_iap_write_bytes(0x00, date_buff, 100);
   43   1      }
   44          
   45          int32 read_int(uint8 value_bit)
   46          {
   47   1          uint8 i;
   48   1          uint8 begin = value_bit * 4;
   49   1          int32 output;
   50   1          uint8* p = (uint8*)&output;;
   51   1          for(i = 0; i < 4; i++)
   52   1          {
   53   2              *(p + i) = date_buff[begin++];
   54   2          }
   55   1          return output;
   56   1      }
   57          
C251 COMPILER V5.60.0,  eeprom                                                             27/06/23  14:18:25  PAGE 2   

   58          void save_float(float input, uint8 value_bit)
   59          {
   60   1          uint8 i;
   61   1          uint8 begin = value_bit * 4;
   62   1          uint8* p = (uint8*)&input;
   63   1          for(i = 0; i < 4; i++)
   64   1          {
   65   2              date_buff[begin++] = *(p + i);
   66   2          }
   67   1          extern_iap_write_bytes(0x00, date_buff, 100);
   68   1      }
   69          float read_float(uint8 value_bit)
   70          {
   71   1          uint8 i;
   72   1          uint8 begin = value_bit * 4;
   73   1          float output;
   74   1          uint8* p = (uint8*)&output;;
   75   1          for(i = 0; i < 4; i++)
   76   1          {
   77   2              *(p + i) = date_buff[begin++];
   78   2          }
   79   1          return output;
   80   1      }


Module Information          Static   Overlayable
------------------------------------------------
  code size            =    ------     ------
  ecode size           =       448     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =       100         16
  xdata-const size     =    ------     ------
  edata size           =    ------     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =    ------     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
