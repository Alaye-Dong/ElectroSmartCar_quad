C251 COMPILER V5.60.0,  pid                                                                23/07/23  00:26:14  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE pid
OBJECT MODULE PLACED IN .\Out_File\pid.obj
COMPILER INVOKED BY: C:\Keil_v5\C251\BIN\C251.EXE pid.c XSMALL ROM(HUGE) WARNINGLEVEL(3) BROWSE INCDIR(..\..\Libraries\l
                    -ibraries;..\..\Libraries\seekfree_libraries;..\..\Libraries\seekfree_peripheral;..\CODE;..\USER\inc;..\USER\src) DEBUG P
                    -RINT(.\Out_File\pid.lst) OBJECT(.\Out_File\pid.obj) 

stmt  level    source

    1          #include "pid.h"
    2          #include "headfile.h"
    3          
    4          float last_err1 = 0, last_err2 = 0;
    5          float Target_speed1 = 0, Target_speed2 = 0;
    6          float cha_err1 = 0, cha_err2 = 0;
    7          
    8          float g_dirControl_P = 1.925;         //直道控制P 0.8
    9          float g_dirControl_D = 0.285;           //直道控制D     2.4
   10          float Motor_Kp_L = 2.0, Motor_Ki_L = 2.21; //55 5.7
   11          float Motor_Kp_R = 2.79, Motor_Ki_R = 2.10; //37 0.3
   12          float angle_kp1 = 0.425;
   13          
   14          int error2 = 0, error_pre2 = 0;
   15          int error1 = 0, error_pre = 0;
   16          
   17          //!!!!!!!!!!!!!!!!!!!!!!!!!!!
   18          int normal_speed = 150, round_speed = 150;  // 普通速度，环岛速度
   19          float v_angle_P = 0.13, y_v_angle_P = 0.25;    //  慢速150 0.13 0.3 快速165 0.18 0.25
   20          //!!!!!!!!!!!!!!!!!!!!!!!!!!!
   21          
   22          float v_angle = 0;
   23          float angle = 0;//积分角度
   24          float now_x = 0,gr = 0;
   25          
   26          float y_v_angle = 0;
   27          float angle_y = 0;
   28          float now_y = 0,gr_y = 0;
   29          
   30          void dir_pid()      //转向环位置式
   31          {
   32   1      
   33   1          cha_err2 = g_fDirectionError[0] * 2.1 + (g_fDirectionError[0] - last_err2) * 1; //
   34   1          last_err2 = g_fDirectionError[0];
   35   1          if(g_ValueOfAD[2]<=0&&g_ValueOfAD[3]<=0)//停车
   36   1          {
   37   2              Target_speed1 = 0;//speed - price_PWM; //1.5
   38   2              Target_speed2 = 0;//speed + price_PWM; //0.8
   39   2      
   40   2          }
   41   1          else
   42   1          {
   43   2              angle = 0;
   44   2              Ordinary_trace();
   45   2          }  
   46   1      }
   47          
   48          void Target_speed()
   49          {       
   50   1          //慢速150 0.13 0.3 快速165 0.18 0.25
   51   1          Target_speed1 = normal_speed - abs(v_angle)*v_angle_P -abs(y_v_angle)*y_v_angle_P  - cha_err1*0.2;  
   52   1          Target_speed2 = normal_speed - abs(v_angle)*v_angle_P -abs(y_v_angle)*y_v_angle_P  + cha_err1*0.2;
   53   1          
   54   1          BEEP = 0;   
   55   1      }
   56          
   57          void speedL_pid()  //左轮速度内环pid
C251 COMPILER V5.60.0,  pid                                                                23/07/23  00:26:14  PAGE 2   

   58          {  
   59   1          error2=(int)(Target_speed2-speed2); 
   60   1          duty2=duty2+(error2-error_pre2)*Motor_Kp_L+error2*Motor_Ki_L;
   61   1          error_pre2=error2;   
   62   1          if(duty2>=8000) duty2=8000;//限幅
   63   1          else if(duty2<=-3500) duty2=-3500;
   64   1      }
   65          
   66          void speedR_pid()  //右轮速度内环pid
   67          { 
   68   1          error1=(int)(Target_speed1-speed1);
   69   1          duty1=duty1+(error1-error_pre)*Motor_Kp_R+error1*Motor_Ki_R;
   70   1          error_pre=error1;    
   71   1          if(duty1>=7000) duty1=7000;//限幅
   72   1          else if(duty1<=-3500) duty1=-3500;
   73   1      }
   74          
   75          void mpu660_PID() //角速度，角度计算
   76          {
   77   1          float v_angle_array[5],temp;
   78   1          int i,j;
   79   1          imu660ra_get_gyro();
   80   1          
   81   1          for(i = 0; i < 5 - 1; i++)
   82   1          {
   83   2                  v_angle_array[i] = imu660ra_gyro_transition(imu660ra_gyro_z);
   84   2          }
   85   1          
   86   1          for(i = 0; i < 5 - 1; i++)
   87   1          {
   88   2              for(j = 0; j < 5 - 1 - i; j++)
   89   2              {
   90   3                  if(v_angle_array[j] > v_angle_array[j + 1])
   91   3                      {
   92   4                          temp = v_angle_array[j];
   93   4                          v_angle_array[j] = v_angle_array[j + 1];
   94   4                          v_angle_array[j + 1] = temp;
   95   4                      }
   96   3              }               
   97   2          }
   98   1          
   99   1          v_angle=(float)(v_angle_array[1]+v_angle_array[2]+v_angle_array[3])/3;
  100   1              
  101   1          
  102   1          if(abs(g_ValueOfAD[2]-g_ValueOfAD[2])<=15&&g_ValueOfAD[2]>=45&&g_ValueOfAD[2]>=45)
  103   1          {
  104   2              angle_kp1 = 0.12;
  105   2          }
  106   1          else
  107   1          {
  108   2              angle_kp1 = 0.03;
  109   2          }
  110   1      
  111   1      }
  112          
  113          void IMU660ra_Angle_Y_V_Filter()        //Y轴角速度角度获取滤波
  114          {
  115   1          float y_v_angle_array[5],temp;
  116   1          int i,j;
  117   1          imu660ra_get_gyro();
  118   1      
  119   1          for(i = 0; i < 5 - 1; i++)
  120   1          {
  121   2                  y_v_angle_array[i] = imu660ra_gyro_transition(imu660ra_gyro_y);
  122   2          }
  123   1      
C251 COMPILER V5.60.0,  pid                                                                23/07/23  00:26:14  PAGE 3   

  124   1          for(i = 0; i < 5 - 1; i++)
  125   1          {
  126   2              for(j = 0; j < 5 - 1 - i; j++)
  127   2              {
  128   3                  if(y_v_angle_array[j] > y_v_angle_array[j + 1])
  129   3                      {
  130   4                          temp = y_v_angle_array[j];
  131   4                          y_v_angle_array[j] = y_v_angle_array[j + 1];
  132   4                          y_v_angle_array[j + 1] = temp;
  133   4                      }
  134   3              }               
  135   2          }
  136   1      
  137   1          y_v_angle=(float)(y_v_angle_array[1]+y_v_angle_array[2]+y_v_angle_array[3])/3;
  138   1      }
  139          
  140          void mpu660_angle() 
  141          {
  142   1          mpu660_PID();
  143   1          gr = v_angle;
  144   1          now_x = gr; //根据设置换算
  145   1          angle += (now_x) * 0.005; //积分：角速度*积分时间10ms
  146   1      }
  147          
  148          void IMU660ra_Angle_Y()
  149          {
  150   1              IMU660ra_Angle_Y_V_Filter();
  151   1          gr_y = y_v_angle;
  152   1          now_y = gr_y; //根据设置换算
  153   1          angle_y += (now_y) * 0.005; //积分：角速度*积分时间10ms
  154   1      }
  155          
  156          void Ordinary_trace()  //普通循迹
  157          { 
  158   1                      mpu660_PID();
  159   1                      IMU660ra_Angle_Y_V_Filter();
  160   1      
  161   1                      if(g_ValueOfAD[2]<=15&&(g_ValueOfAD[2]<g_ValueOfAD[3]))
  162   1                      {
  163   2                              //BEEP = 1;
  164   2                              cha_err1 = -73;
  165   2                              Target_speed();
  166   2                      }
  167   1                      else if(g_ValueOfAD[3]<=15&&g_ValueOfAD[2]!=0&&(g_ValueOfAD[3]<g_ValueOfAD[2]))
  168   1                      {   
  169   2                                      //BEEP = 1;
  170   2                                      cha_err1 = 74;
  171   2                                      Target_speed();
  172   2                      }
  173   1                      else
  174   1                      {
  175   2                                      BEEP = 0;
  176   2                                      cha_err1 = (g_fDirectionError[2] * g_dirControl_P + (g_fDirectionError[2] - last_err1) * g_dirControl
             -_D)+v_angle*angle_kp1;
  177   2                                      last_err1 = g_fDirectionError[2];
  178   2                                      Target_speed();
  179   2                      }
  180   1      }


Module Information          Static   Overlayable
------------------------------------------------
  code size            =    ------     ------
  ecode size           =      1165     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
C251 COMPILER V5.60.0,  pid                                                                23/07/23  00:26:14  PAGE 4   

  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =       104         40
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =       220     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
